// Advent of Code 2020: day 18

// Godbolt link: https://godbolt.org/z/jjes3f

#include <algorithm>
#include <cassert>
#include <cstdint>
#include <stack>
#include <string_view>
#include <utility>
#include <vector>
#include <fmt/core.h>

using Int = std::int64_t;

bool is_digit(char const c) {
  return '0' <= c && c <= '9';
}

template<class It>
auto to_int(It& first, It const last, char const init) {
  Int res = init - '0';
  while (first != last) {
    res = res*10 + (*first++ - '0');
  }
  return res;
}

std::string_view fetch_line(std::string_view& text) {
  auto const pos = text.find('\n');
  auto res = text.substr(0, pos);
  text.remove_prefix(pos == std::string_view::npos ? text.size() : pos+1);
  return res;
}

void skip_to_digit(std::string_view& text) {
  auto const it = std::find_if(begin(text), end(text), is_digit);
  auto const pos = std::distance(begin(text), it);
  text.remove_prefix(pos);
}

//////////////////////////////////////////////////////////////////////////

enum OP : char { Plus, Prod };

void apply(Int& res, OP op, Int i) {
  switch(op) {
    case Plus: /*fmt::print("{} + {} = {}\n", res, i, res+i);*/ res += i; break;
    case Prod: /*fmt::print("{} * {} = {}\n", res, i, res*i);*/ res *= i; break;
  }
}

Int solve_no_precedence(std::string_view::iterator& first, std::string_view::iterator const last) {
  Int res = 0;
  OP op = Plus;
  while (first != last) {
    auto const c = *first++;
    switch (c) {
      case ' ': break;
      case '+': { op = Plus; break; }
      case '*': { op = Prod; break; }
      case '(': { apply(res, op, solve_no_precedence(first, last)); break; }
      case ')': return res;
      default: { // digit
        auto const l = std::find_if_not(first, last, is_digit);
        apply(res, op, to_int(first, l, c));
      }
    }
  }
  return res;
}

void apply(std::stack<Int>& s, OP op, Int const v) {
  assert( !s.empty() );
  if (op == Prod) {
    s.push(v);
  }
  else { // Plus
    auto const sum = s.top() + v;
    s.pop();
    s.push(sum);
  }
}

Int unwind(std::stack<Int>& s) {
  assert( !s.empty() );
  Int res = 1;
  while (!s.empty()) {
    res *= s.top();
    s.pop();
  }
  return res;
}

Int solve_add_first(std::string_view::iterator& first, std::string_view::iterator const last) {
  OP op = Plus;
  std::stack<Int> s;
  s.push(0);
  while (first != last) {
    auto const c = *first++;
    switch (c) {
      case ' ': break;
      case '+': { op = Plus; break; }
      case '*': { op = Prod; break; }
      case '(': { apply(s, op, solve_add_first(first, last)); break; }
      case ')': return unwind(s);
      default: { // digit
        auto const v = to_int(first, std::find_if_not(first, last, is_digit), c);
        apply(s, op, v);
      }
    }
  }
  return unwind(s);
}


template<class S>
auto parse_solve(std::string_view text, S&& solver)
{
  Int res = 0;
  while (!text.empty()) {
    auto const line = fetch_line(text);
    auto first = begin(line);
    auto const r = solver(first, end(line));
    res += r;
    //fmt::print("{}\n", r);
  }
  return res;
}

//////////////////////////////////////////////////////////////////////

int main() {

auto const test1 = R"( 1 + 2 * 3 + 4 * 5 + 6 )";
assert(( parse_solve(test1, solve_no_precedence) == 71 ));
assert(( parse_solve(test1, solve_add_first) == 231 ));
auto const test2 = R"( 1 + (2 * 3) + (4 * (5 + 6)) )";
assert(( parse_solve(test2, solve_no_precedence) == 51 ));
assert(( parse_solve(test2, solve_add_first) == 51 ));
auto const test3 = R"( 2 * 3 + (4 * 5) )";
assert(( parse_solve(test3, solve_no_precedence) == 26 ));
assert(( parse_solve(test3, solve_add_first) == 46 ));
auto const test4 = R"( 5 + (8 * 3 + 9 + 3 * 4 * 3) )";
assert(( parse_solve(test4, solve_no_precedence) == 437 ));
assert(( parse_solve(test4, solve_add_first) == 1445 ));
auto const test5 = R"( 5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4)) )";
assert(( parse_solve(test5, solve_no_precedence) == 12240 ));
assert(( parse_solve(test5, solve_add_first) == 669060 ));
auto const test6 = R"( ((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2 )";
assert(( parse_solve(test6, solve_no_precedence) == 13632 ));
assert(( parse_solve(test6, solve_add_first) == 23340 ));

auto const input = R"(9 + 3 * (9 * (9 + 3 + 5 * 3) * 5 * 3 * 5)
5 + 9 * 7 + 5 + 7 + (6 * (4 * 9 + 5 * 7 + 7 + 7) * (7 * 7 + 9 * 5) * 6 + 4 * 9)
3 + (5 * 3 + 5 + 5 * 2 + 2) * 8 * (7 * 7 * 7 * 2)
(7 * (4 + 8 + 6)) + 5 + (5 * 6 + 6 + (6 * 7 + 7 + 3 * 6 + 3) * 5 * (5 + 6 * 8)) + 5 + 4
(5 + 2 * (3 + 5 * 3 + 7 + 6 * 8) * 9 + 6) + (7 * 9 + 3 * 2 + 4) * 2 * 6
5 + (4 + 7) + (5 * 5 + (5 + 2 * 5 + 4) * (5 * 3))
5 + 5 + 9 + (9 + 9 * 3 + 2 + 4 + 9) + 4 * (8 + 2 + 4 * 5)
(7 + 4) + ((8 + 7 * 5 * 6) + 5 + 2 * 4) + 6 + 3
2 * (3 * 7 * 5)
4 + 9 + 3 * 3 + (8 + 6) + (9 + 6 + (2 + 2 + 6) * 8 + 3 + 3)
(4 + 2) * 2 * 7 + 7 * 7 + (4 * 2 + 5 + 8)
6 * 7 * 6 + 4 * (3 * 9 + 8 + 8) * 2
3 + 3 * 6 + ((3 * 3 + 7 + 6 * 9 * 4) + 9 + 4 + (6 * 5 + 5 * 4) * 7 + 2)
(6 + 4 + (6 + 4) * 4 + 3 * (9 * 6)) * 7 * 3 * 6 + 6
(4 * 7) * 9 + (7 + 2) + 5 * 4 + (7 * 8 * 9 * 3 + (9 + 9))
((4 * 6) * 8) * 8 + 5 * ((9 + 6) + 3 + 6 * 5 * 6 + 7)
((4 * 4) + 2 + 8) * 2 + 7 + 3
7 * (6 * 5 * 4 + 9 * (4 * 3 * 6 + 6 + 6 + 5)) + 8 * 5
5 * 9 * 3 + (5 * 8 * 3 * 9 * 5) * (7 + (3 + 3 * 4)) * 9
9 + 6 * 5 + ((5 * 5 * 3) + 3 + 2 * 8 + 2 + 2)
(3 * 2 * (7 + 9 + 2)) * 4
(9 * 4 + 9 + 2 * 4) * 2 * 3 * (4 + 4 * 8) + 5 * 8
8 * (2 * 3 * 3 * 5 * 3 + 5) * 8 * (7 + (7 * 7 + 3 + 8) * 7 * 2) * ((3 + 3) * 7 + 9 + 4 + (2 + 7 + 2 + 6 * 7 * 9) * (9 * 3 * 5 + 9 + 7)) + 2
(8 * 4 + 3 + 2 * 6) + 3 + 6 + 4 + 8 + 2
4 + (9 * 2 * 8) * ((3 + 5) * (6 * 4 + 5 * 9 + 7) * 7 + 9 + 8 + 9) + (2 + 5) + 9
8 * (5 + (2 * 2 + 7 + 9 + 9) * 8 * (4 * 6 * 5) + 7 * 9) + 8 + 9
7 + (3 * 3 + 5 * 9 * 4) * (2 * 7 * (6 + 4) + 7 * 6 + 5)
(9 * 3 * 6 * 7 * (9 + 6 * 8 + 9 * 8) * 5) + 3 * 6
((5 * 7 * 4 * 4 + 2 * 7) * 8 * 5) + 3 * 4
7 * (6 * (7 + 9))
3 * 3 * 6 + (9 + 9 * 6 * 2 + 2) + (6 * 7 + (4 + 4) * 8)
2 + (3 + (4 * 3 * 8 + 4 * 9) + (4 * 6 + 5 + 5 + 5)) * 7 + 2 + 2 * 8
(7 + 7) * 8 * 3 + 3 * (7 * 9 * 3 * 2 + 7)
(4 * 6) + (6 + 5) * 8 + 9
(6 + 9 + 8 + (6 * 5 + 9) * 5) + (4 + 8 + 7 + 2 * 9) + 7 + ((9 + 6 * 9) * 7) * 3 * 6
(3 * 7 * 3) + (2 * 3 + 7 + 5) + 8 * 4
2 + (6 * 9 + 7 + (2 * 5 + 6) * 8)
((5 + 2 * 8 * 7 + 4) * 9) * (4 * 3 + 4 + 9)
8 * 6
(2 + (6 * 9 * 4 + 2 * 8 + 4) * 2) + 3 + 5 + (7 + (6 + 2) + 4 * 3 * 6)
4 + 8 + (2 + 6) * 2
4 + 4 * 2
4 + 7 + 5
((4 + 8 * 6 + 3 + 8) + 8) * 3 * 4 * 5 * 7 * (9 + 9 + 4 * 8)
9 * 8 * 6 + (7 * 7 * 5)
5 * 5 * (4 + 7 * 5 * 8 * 2 * 8) + 3 * (7 * 4 + 4 + 6)
(3 * 5 * 8 + 7 * 5 + 8) * 3 + (8 + 6 + 8) * 2 + (7 + 5 + 5 + (3 * 2) + 6)
(7 + 7 + 9 + 9) + 9
3 * 9 * (2 + (5 * 2 * 3 + 3) * 8 + 3 * 8 + 6) * ((3 * 9) * (7 + 3 * 8 + 5 * 6 * 5) + 6 * 4) + 4 * 4
(3 + 3 * 7 + 4) * 2 + (8 * 2 * 6 * (8 * 3 + 9 + 7 + 6)) * 9 + 9
3 + (3 + 9 * 4 + 3 * (4 * 6 * 5 * 8 * 5 + 9))
(5 + 3 + 7 * 7) * 7 + 9
9 + 5 + 5 * (5 + 3)
(5 + 7 + 4 + 4 + 8 + 5) + (9 + 3 * 2 + 2 + 3) * 2 * (2 * 8)
8 * 9 + 3 + (2 * (5 + 2 * 5 + 6 * 7) + 4 + 4) + ((3 * 6 * 7) * 3)
4 + ((7 + 2 + 6 + 6) * 4) + 5 * 8 * 4
7 * 3 + (3 + 2 + (3 * 6 + 3 + 6 + 6 + 7) * 6 + 4 + 3) + 4 + (2 + 3)
3 * ((4 + 7) + 3 + 2 + 5 * (7 + 6 * 7 * 3 + 2 * 4) * 3) + 8
5 + 5 * 5 + (9 + (7 + 4 * 5 * 9) * 4) * 8
5 + 3 * (6 + 3 * 6 + 6) * 3 * (4 + 9 * (3 + 3 * 4 * 8 * 3 * 6) + 2) + 4
((5 + 8) * 6 + 5 * (9 + 6 * 9)) + 2
3 + 5 + 6 * 2 * 2 + 2
3 * (3 + (9 * 8 + 6) * 6 * (6 * 9 * 9 + 3 + 7 * 6) + 5 * (2 * 9)) * 4 * (8 * (5 * 5)) + 6
(5 * 6 + 2 + 8 * 3 + 8) + (2 * 6 + (3 * 3 * 2) * 8 + 3 + 3) + 4
6 * (4 + 8 + 8 * 2 * 3) * 3 * 6 * 4
7 + (6 + 2) * (9 * (8 + 8 + 8 * 2) * (3 + 6 + 6 * 7 + 5)) * 7
7 + 2 * 6 + 8 * 9
(7 * 2 + (2 + 4 * 8 * 8) + 3) + 4 * 8 + 5 + 2 + 7
9 + 9 * 6 + 8 + (7 * 3)
4 * (3 + (2 * 8 * 8 + 7 * 4) * 5 + 7 + (4 * 6 * 5) * 6) + 8 + 5 + (5 + (3 + 9 + 5 * 4 + 6)) * 6
5 * (5 + 9 * 6 + (9 + 8) * 8) + (6 * 4 + (7 * 7 + 3) + (8 + 3 + 8 * 9 + 5 * 5)) * 7 + (7 * 4 * 9 * 6)
5 + 3 + 9 + 5 + 7
6 * 2 * (2 + (7 + 5 + 3 + 3) * 7)
(2 + 4 * 8 * 3 + 8 * 4) * 4 + 9 * (6 + 2) + 3
7 + 8 * (3 * (5 * 3 + 3 * 9 + 4 + 3) + 9 * 7 + (7 * 5 * 2 * 7) * 9)
3 + (5 * (7 + 6 + 4) * (8 + 3 + 2 + 3 + 5) * (7 + 8 * 6 + 2)) * 5 + 7
8 * 6 + 9 * (9 + (3 * 4 * 5 + 6 * 5))
6 * 2 * 2 + (5 * 9 * 5 + 6 * 9 + 3) + 6
4 + (5 * (2 + 3 + 4 * 5 * 5) * 7 + 2 * (6 * 6 * 2) * 3)
9 * 3 + (8 * 5 + 6 + 3 + 5 + 9) * 4 * 4 * ((9 * 8 * 4) * 8 + 7 * 5)
(7 * (6 + 5) * 6 * (9 + 7 * 5 * 2 + 3 * 8) * 8 + 2) * (9 + 9 * (5 * 8 * 7) * 7) * 4
2 * 6 + (6 * 5 * 7 * 4) * 7 + (2 * 9 * 3)
7 + (3 * 7) + (4 * 3 * 9 * (4 + 8 + 2 + 2 + 8 * 6)) + 4
9 * 2 * 5 * 5
(4 * (9 * 5 * 7 + 7 + 2 + 5) * 7) + 6 * 3
((5 + 7 + 3 * 6 * 2) + 6 + 7 + (2 + 5 + 7 + 8 + 4 * 4) + 4 + 8) + (3 + 5 * 7 * 3 + 2) + 7 + 3 + 3 * (5 * 6 * 7 * 5)
9 + 4 * 9 + (5 * (8 + 8 * 9 + 6 * 7) * 5 + 8 + 9) + 5 + 7
(6 + 8 * 9 * 9 + (2 + 9 + 8) + 3) + 4 + (2 * 7) * 2 + 5
9 * 7 * 4 * (7 + 4 + 7 * 8 * 4) + 9 + 5
8 * 3 * 5 + (5 + 7 * (2 + 7 * 5) * 9 + 2 + 8)
(8 + (5 + 5) * 9 * 9 + 7 * 5) + 3 * 4 * 4
8 + 3 + 2 + 7 + 8 * 2
7 * 4 + 8 * ((6 * 5 + 7) * 5 * 9 * 3 + 6) + 9
(3 + 9) * ((6 + 5) + 9) + 7
9 * 3 * 3 + 7 * (9 + 8 + 9 * 4 + 9 * 7) * 6
((5 + 5 + 6 + 9) * 2 + (3 + 4 * 4 + 2 + 9) * 5 + 3 + 3) + 6 * (3 + (2 * 9 + 5 * 2 * 7) * 5 + 8) * 8
2 + 3 + ((7 + 5 * 9 + 3 * 5) + 8 + 4) * 5
(5 + (6 * 3 * 5 + 5) + 2 + 3 + 5 + 2) + 4
7 + (5 * (3 * 2 * 7 * 4 + 3) + (2 + 9 * 6 + 3 + 3) + 3) * ((6 * 7 + 2 * 4 * 2 + 2) + 9 + 9 * 7)
3 * (4 + (7 * 2 + 9))
8 * 9 + ((2 + 2 * 2 + 2 + 9 * 8) + 3 * 2 * 7) + 5 * 2 * (9 + 9)
2 * 2 * 9 + 4 * 7
(6 + 3 + 5 + 5 + (8 * 5) + 7) * 4 * 8
6 * (5 + 5) * 6 * 4 + 3 * 3
9 * (8 + 9 + 9) + 6 + 9
7 + 9
4 + (5 + 3 + 3 * 7 * 4 + 7)
2 * (7 * 2 + 8) + 6 * 4 * 6
(4 + 9 + 6) * 6 * 9
4 * (4 * 9 + 6 * 9 * 7 + 4) * 9 + 5
(4 + 4 + 7) * 6
8 * 9 * 4 * 5 * (5 + 5 + 3 * 9 + 3) + (5 * (9 * 9))
2 * (9 * (5 + 3) + 3 * 2 + (2 * 3 + 5 + 2) + 6) * ((4 * 4 + 4 * 4) * 5 + 2 + 2) * 7 + 3 + 5
2 + 8 * 6 * (6 + (9 + 3 * 8 * 9 * 3 + 8))
8 * 8 * (8 + 8 * 5 + 4 + 2)
((3 + 9) * 9) + ((4 + 6 + 6) * 7 + 3 + 8) * 9 + 6 * 8
6 + ((4 + 5 * 7) + 8) + 5
3 * 8 + ((6 + 8 * 5 * 4 + 9) * 8 * (5 + 9 + 7 * 2 + 2) * 6) * 9 * 9 + 5
3 + ((9 + 8 + 9 * 2) + 6 + 9 + 7 * 7) + 8 * (3 + 5 + 4) * 9
(6 * 9 + 6 + 2 + 9 * 6) * 7 + (3 + 9 + 3 + (9 * 6 + 9 + 4 + 5) + 6)
(4 + 7) * 6 + (9 * (2 * 8 * 8) * 3 * 5 * (7 * 9 + 5 + 5) + 8) + 3 * 4
(5 * 6 * (4 * 2) * 7 * 7) * ((3 * 5 + 4 + 5) * 3 * 7) * 5 + 5 * 7 + 4
9 + (3 * 3 * 5 * 6) + 4 + ((7 * 4 + 3) * 8 * 5 + 5) * 4
((4 * 5 + 2) + 2 + 9 + 8) + 3
(3 * (7 + 9 + 2 * 5 + 5) + 5 + 9 * 9) + 9 * ((6 + 5 + 9) * 9 * 4) + 2 + ((2 * 3) + 2 + 8)
9 * (8 * 2 * 7 + 5 * 7 * (6 * 3)) + (2 + 7) + (8 * 8 + 6 * 4 * (6 + 8) * 8) * 2
(8 + 2 * 2) * 3 * 6 * (3 * 2 * 4) * 7 * 8
3 * 8 * (7 * (2 * 3 * 3 + 5 * 2) + 9) + 9 + 2
9 + 5 * 7 + ((2 * 2) + 7 * 2) * 4 + 5
(8 + 9 * (2 * 6 * 6 * 3 + 9 * 3) + (7 * 8 + 2 * 7)) * 6
4 * (8 * 6 * (9 + 4 * 4 * 8 * 3 + 9) + 7 * 5) * 7 * 3
9 + 9 * 8 + 3 + (2 + (5 + 8 * 9) + (2 + 4 * 8 + 8 + 8 + 7) * 8 + (7 + 9) + 2) + 3
(4 + 2 + 3 * 9 * (4 * 7 + 3) + 9) + 9
2 + 4 * 2 + 8 * ((7 + 7 + 2) * (5 * 6) + (2 * 5 * 6 + 6 * 6) * 4 * 7) * 2
6 * 4 * 7 + (8 + 6 + 7 + 7 + 5 + 4) * 4 * 2
4 + ((4 * 4 * 2 * 4) + 6 + 8 * (3 * 3 * 9 + 6 + 2 * 3)) * 7 + 3 + 3 * (9 + 4)
(4 + (4 * 5 * 8 * 7 * 3 * 3) + (3 + 5 + 8) + 9 + 3 * 6) * 3
(7 * (8 * 8 + 9)) + 7 + 8 * 8 * 5 * (5 * 5 * 5 + 3)
3 * 6 * 4 * 5 * ((7 + 6) + 8 + 7 + 4 * 9 * (6 + 2 * 5)) * (8 * 4 + (3 * 6 + 8 + 9 * 4) + 6 * 8)
(7 + 8 + 5) + 3 * (9 + (4 * 4) + 9) * 8
7 + 7 * 8 * 4 * 9
(5 + 6 + (3 * 6)) + 9 + (2 + 2 * 4) * 2 + ((3 * 3 + 6 * 9 * 9) * 9) * 2
(4 + 9 * 6 + 7) * 9 * 6 + 4
4 * 2 * 9 + (9 + 5 + 2 + (3 + 6 * 7 * 3))
3 * (9 * 6 * 3) + 3 * 7 + 5 + (5 + 4 * 6 + 7 + (2 + 3 * 2 * 6 + 2 * 9) + (9 * 2 + 3 * 9))
8 + 8 + 9 * ((6 + 8 + 7) + 7)
8 * 8 + 6 + (3 + 5 + 6) + 4
5 + 7 + 8 * (6 * (7 * 9) + 6) + 2 * 9
2 + (2 + 3 + 4) * 7
7 + ((7 * 8 * 6 + 4) + 5 * 2) * (6 * 9 + 2 * 4 + (3 * 7 + 7 + 2 * 5 * 9) + (5 * 6 + 5 + 6 * 9))
2 * 4 + 9 + (4 * 2) * 8 * 8
4 * 4 * (4 * 2 + 9 + (2 + 3 + 5 * 6 * 3)) + (3 * (8 * 2 * 2 * 9))
9 * (8 * 7 + (7 * 2 + 7 * 2 * 3 * 6)) + 4 * 2 * 7 * 5
(7 + (9 * 9 * 5 * 4 * 8) + 8 * 8) + (4 + 8 * 2 * 9) + 7 * 7 + 6
8 + 4 * (6 * 6 * 5) * 3 + 6 * 4
(8 * (9 + 3 * 2 + 6) * 9) + 2 + 2 * (5 + (9 * 9 * 8 + 6 * 5 * 9) * 6)
2 * 4 * (4 * 9) + 4 * (7 + 9 * 4)
4 + 2 + 4 * (2 + 3 * 8 * 4 + (8 + 7 + 9 * 6 + 3))
8 * (4 + 4) * 9 + 6 * 5
(6 + (4 + 3) + 5) * 5 + 4
8 + 5 * 3 * ((7 + 4 + 9 * 3) + (8 * 2 * 5 * 3) + 4 + 4 + 6) + 2
7 + 5 * (8 + (3 * 3)) + 3 + 2 + 4
9 * (2 * 9 + 8 + 8 * 6) * 3 + 2
(3 * 7 + 6 * 6 + 4) + 7
(3 + 6) * 4 * 8
5 * 6 * 9 + (2 * 2 + 4 + (5 * 9 + 7 * 8) * 4 * 7) * (4 + 6) * 7
8 + 7 * 5 + 7 + (9 + 8 * 7 + 8)
2 * (7 * 4 + 5 + 8 + 6)
((8 + 8 * 8 + 2) + (5 + 8) + 5) + (2 + (2 + 7 * 4 * 6 + 4) + 5 * 3) * 4 + 9 + ((3 * 7 + 7) * 5 * 6)
6 * 3 * (6 + 4 * 8 * 4)
((4 + 9 * 3 + 6 + 5) + 9 * 4) * 2 + 4 * 3 + 6
9 * ((2 * 6 + 5 * 6) + 4 + 9) * (4 * 8 * (3 + 2 * 2 + 4 * 6) * 8 + 6 + 5) + 4 + 2
(8 + 4 + 4 + (2 * 8 * 2 * 5 * 8 + 9) * 4 * 3) + 3 * 5 + 5 + 3
2 * ((9 * 2 + 7 + 8 * 7 + 3) + (3 + 4 * 8 + 8 * 6) + 7) * 9 + 7
7 + (4 + 3 * 7 + 2) * 3 + 4 * 8 + 2
8 * (2 + (7 * 5 * 6 + 2 + 2 + 3) * (6 * 3 + 5 * 5) + 8)
(5 + (7 + 5 + 3 * 6)) + 7 + 5
(7 * 4 * 9 * 9 + 9 + (8 * 3 * 3)) * 3 * 2
6 + 4 * (4 * 2 + 5) * 4
4 * 3 * (7 + 8)
2 + (5 + 6 * 5 + 8 + 5 * 2) * 8 + 9 + 4
4 + ((5 * 9 * 8 * 5) + (5 + 4 + 6 + 6 + 7) + 3 * 7 + 9 * 7) + (8 * 8 * 9 * 8 + 9 + 4) * (3 + 5 + 9)
(4 * 8 * 5 + 9 + 3 + 5) * 7
(3 * 5 + 4 + 5 + 2 + (7 * 2 * 8 * 3)) + 3
8 + ((4 * 2) + (5 * 6 * 8 * 8) * 7 * 8) + (3 + 4) * 4 * 5
(9 + 7 * 8 + 5) * 3 * 3 + 7 + 6 + 8
9 + (3 + 7 + (5 + 5 * 3 + 6 * 7) * 2 * (7 * 8 * 2 + 2))
(8 * 4 * 7 * (4 * 2 + 9 + 8) * 5) + (6 + (4 * 5 + 4) * 7) + 2
4 + 3 + 4 * (4 * 3 + (5 * 4 + 7 + 2 + 6 * 3) + (4 * 4) * 4 * (3 * 5 + 4 * 5 * 6)) + 8
2 + 4 * 2 + (5 * 3) * 8 + ((5 * 2 + 2 * 4 + 9 + 4) + 7 * (9 * 3 + 3 * 2 + 5) * 8 + 4 * 7)
3 * 5 + 6 + 7 + ((2 * 8 * 9 + 7) * 2 * 5 * (2 * 5) + 2) * (6 + (6 + 4 * 7 * 9 * 7) + (5 * 9 + 6 * 8 * 3) + 2 * 3)
(5 + 2 + 5 * 5 + (9 + 3 * 7)) + 7 * 9
3 * 5 * 3 * (8 * 4 + 5 * (4 * 8 + 4) + (3 * 5 * 6 + 3 * 7)) * 7
2 + 9 * 5 * (2 * 3 * 9 * 9 + 5 + 9) + (4 + 5)
(3 * 7 * (3 + 5 + 7)) + ((6 * 3) + 4 + 3 * 9)
(7 * 7 * 2 + (8 * 3 + 4 * 3 * 8 * 3) + 5) + ((2 + 2 + 2 + 7) + 3) + 4 + (5 + 9 + 6 + 9 * 2 + 5)
8 * 9 * (4 + 6 + 3 * (2 + 3 + 2 + 9 * 2) + 3) * 8
(3 + 9 * 8) * (4 * 7 * 9 + 4 + 7)
4 + (3 * 6 + (9 * 9 * 3 + 2 + 6 + 7))
5 + (2 * (3 * 8 + 5 * 3) * (7 * 2 * 2) * 2 + 8 * 4) * 4
((6 + 4 + 4 * 4 * 9 + 3) + 8) * 4 * 2 + 8
2 * 2 + (8 * 5 * 3 + 6 * 6) + 5 * 6 * (9 * 6 * 9 * 2)
5 + (3 + 2 * 5 + 8) + 6
9 * (9 * 3) * 8
6 + ((3 * 8 * 6 + 9 * 4) + 3 * 3 * 3) * 7 + 7
3 * ((2 * 5 + 8 + 5 + 3) * 9 * 7)
5 * 4 + 8 + (7 * (4 + 5) * 8 + 7 + 9 + 8) + 7 * 6
(4 + 9 + 9 * 7 + (5 * 8 + 5 + 6 + 6)) * 7 * 5
4 * 7 * (8 * 8 * 8 + (8 + 4 * 8 + 6 + 7 + 8) * 5) * 8 + 8
(7 + 8 + (8 + 6 + 2 * 2 * 4) * 4) * 7 * 6 * 4 * 9 + 8
9 + 2 * 5 + 3 * 6 * 5
4 * (7 * 5 + 9 * 7 * (9 + 3 + 5 + 2) * 8) + (7 + (4 * 4 * 5 + 2) * 4 + 7)
4 * 9 + (7 * 5) * 3 + 4 + 9
(4 + 2 * 9 * 6 + 9 * 9) + 8 + 8 + 4 + 4 * 7
3 * 9 + 9 + ((2 + 8 * 7 + 8 + 2) + 9 * 3 * 5 + 8 + (2 * 7 + 2 + 6 * 8 + 6))
(5 + 6 * 3 * 3 + 4) + ((6 + 2 * 8) + 5 * 8 + (5 + 6 + 6 + 2 + 2 + 3)) + 8 * 4 * 3
(8 + 7 * (2 + 3 * 4 + 2 * 5 + 7) + 9 + 2 * 7) + 4 * 7 + 4 * 6 + (8 * 6 + 3 * (4 + 7))
6 * 7 + (9 * 7 * 4 * 4 * 8 * 8)
2 * (3 * 2)
6 + 7 + 7 + ((9 * 8 * 5) + 5 * (5 + 8 * 5 * 6 * 3) + 6 * 8) * 3
((3 + 2 + 9 * 7 * 7) + 8 * (4 + 6) + (4 * 3) * 7) + (8 + 9 + 2) + 4
6 + 8 + 4
5 + (2 * 7 + 7) * (5 * 5 + 3 * 6 + 6 + 7) + 6 * 6 + 4
3 + 6 + 5 * 5 + 2 * (9 * 8 * 2 * 6 + 4 + 7)
((6 + 3 * 4 * 7 + 4) + 2 * 3 * 4) * 9 + ((3 * 3 + 5 * 9 * 3) + 9 + (9 + 6) + 9)
6 + 7
(6 + 7 * 3 + 4) + 4 * 4 + 5 * 9 + (9 * 6)
7 * 7 * 4 + 9 + (6 * 2 + (5 + 3 * 4 + 6 * 3) * 2 * 8)
3 * 5 + (4 + 6 * 8)
8 + (5 * 9 + 2) + 7 * (2 * 7) + (9 + 6 + 4 * 6 + (7 * 5 + 5 + 2 + 7 * 5))
(9 * 5 * 3 * 5 * 8 + 9) * 4 + 8 * 5
((5 + 8 * 2 * 2) * (2 * 3 * 3 * 4 + 9 * 6) + 8) + 5 + (6 + 5)
6 + (7 * 8 + 4 + 2 * (6 + 8 + 9 + 6 + 8)) + 5
9 + (3 * (6 + 2) * 6 + (3 + 8 * 5) + (4 * 7) + (5 + 9)) * 5 + 7
7 + 6 * ((5 + 8 * 2 + 3) + (5 + 5 * 2 * 5 + 9)) + 6
(6 + 7 * 9) + 6 + (9 + 7 * 2) * 6
4 * 6 + 5 + 8 * 8
((3 + 9 + 9 * 6) * 7 + 8 + 8 + 3) * ((4 + 6 * 2 * 7 * 5) * (3 * 2 + 9) + 4 * 9 + 9 + (9 * 4 * 9 * 4 + 4)) + (4 * (7 * 7 + 5 + 9 + 2) * 9 * 7 * (4 * 2)) * 7
8 + (5 + 9 * 4 * 9) + 6 * 6 * 7
7 * 4 + (2 * 5) + 4 * 3 * (5 * 2 + 4 + 4 * 3)
((5 * 9) + 5 * 4 + 2) * (2 * 7) + 3
9 * (6 * 8) * 8 + 7
8 * (2 * 4 * 9) + 7 + (5 * 4 + 3 + (6 + 9 * 3 + 2) * 3) * (7 * 4 + 6) + 9
5 + 7 + (3 * 8 * (6 + 7 + 3 + 5 * 9) * 4 * 8 * 4)
6 + 4
((4 + 2 * 4) * 7 + 5 + (7 + 3 + 4 * 3 + 8 + 8)) * (8 + 9 + 8 + 9) + 8 * (8 + 3 + (3 * 2 * 8 + 5) * 8) + 9
4 + 7 * (3 + 2 + 4 * (8 * 6 + 5 + 7 + 3 * 8) + 7)
4 + 2 + 6 + 7 * (7 * 5 * 6 + 4 * 4)
((6 * 7 * 2) + 5) * 4 + 9 * 7
6 + (9 + 9 + (2 + 5 + 6 * 4 * 4) + 4 * 9) + (8 + 6 * 2) * 6
5 * 7 + 6
6 * 8 * (4 + 9 * 5) + (9 * 3 * 3 * 4)
2 * 8 + 6 * ((7 * 6) + 2 * 8) + 3
(3 * 8 + (7 * 5 * 9) * 6 * 4) * 3 + 5
4 + 2 + 6 * 5 + (4 + 3 * 7)
(8 + 3 * (9 + 5 + 8 * 2)) + 2 * 9 + 4 + 6
8 * ((8 * 3 + 6 + 2 + 3 + 7) * (6 + 2 + 9 + 7 * 9)) * 7 * 4 * 2
((9 * 5 * 5) + 7 + 4 + (8 * 7) + (9 + 8 * 3)) + 4
((7 + 8 + 8 + 3 + 3) + 6) * 3 + 6 * 4
((6 + 2 * 9 + 4 * 4 + 8) * (7 + 8 * 6 * 4) + 9 * 2) + 7
7 + (3 + 4 + 6 + (3 + 3 * 9 + 3 + 9 * 6) + (5 + 7 * 5) + (2 + 6)) * (3 * 2 + 8 * 6 * 5) * 7 * 6 + 7
(4 * 9 + 7 * (2 + 6 * 3 * 7 + 6)) + 3 + 9 + (9 * 8 * 2 * 5 + (8 + 2)) + 9 * 6
(9 + 6 + 8 + (2 + 6 * 6 * 6)) + 9 + (5 * 5) + 2 * 2
6 + ((7 + 6 + 7) + 3) * 9 + (2 * 4) * 2
5 + 6 * (5 * 7 * 6 + 3 * 3 + 4) + 9 * 5
(2 * 5) * 4 + 8 + 4
6 + (8 * 7 + (9 + 6 + 9 * 4 * 3 * 6) * 2 * (9 + 3 * 2 + 6)) * 2 + 7 + (9 * 9 + 2 + 3 * 4 * (3 + 3 * 8 * 4 + 6)) + 4
4 * 7 + ((9 + 6 + 3) * 5 + 3 + 4 * 6) * 9 + 7 + (5 + 6 + 6 + 2 * 8 * 3)
8 * (5 + 2 + 6) * 3 + 9 + 3 * 7
9 * (8 * 5 * 3 + 8 * 6 + (6 + 5)) * 8 + 7 + 6
2 * 4 * ((8 * 2 * 3 + 3 * 7 + 5) * (8 * 9 * 3 + 2 + 5 * 3) * 5 * 8 + 8 * 6) + 7 + 2
(3 * 3 * 9 + 6 * (4 * 7 + 7 * 8 * 6 * 4)) * 5 * 7 + 7 * (9 * 3 + 4) + ((5 + 9) * 2 + (8 + 5) * 8)
6 + 7 * 5 + 5 + 3 * ((4 + 3 * 6 + 8 + 5) * 6 * (7 * 9 + 7 * 9) * 6)
9 + (4 + (3 * 7 + 9) + 5) * 7 * 6
(6 * 5 + 5 + 2 * 7 * 9) * 2 * 8
((9 * 6 + 5 * 9 + 2) + (7 + 7 + 6 + 8 + 9)) * (5 + 4)
5 * 8 * ((3 + 9 + 6 * 6) + 5 * 6) * (3 * 6 * 4) + 4
2 * 2 * 8 * 4 * 8 + (9 * 3 + 4 + 6)
4 + 9 * 5 * 6 * 2 + (9 * 5 * 6)
((5 + 2 + 3) * 5 * (6 + 9 * 4 + 3) * 4 * 8 * 7) + 9 + ((5 * 6 + 3 * 7 + 2 * 3) * 5 * 3 + 8 * 4) * 7
2 + ((5 * 6) + (7 + 6) * 6 + 5) * 2 + 3
4 * 9 + (9 + 8 + 4 + 8 + 3 + 9) * 5
4 * 6 + 4 + 4 * ((6 * 4) * 3 + (2 + 2 + 7 * 2 + 2) + 9 + 7 * 4) * 6
5 + 6 * 4 * 8
9 * ((9 * 9 + 7 * 9 * 9) + 7 + 2) * 5
3 * ((8 + 2 + 8 * 9 * 6) * 8 + 8 * 7 * 6) * (3 + 4 * 5 + (4 + 9 * 7 + 5 + 5) + (5 + 6 * 8))
6 + (3 * 9 + (7 * 8 + 5 + 3) * (6 * 7) + 7 + (6 * 3 + 5 + 4 * 5 * 7))
(6 * 4) + 4 * (9 * 9 + (7 * 8 * 3 + 6 + 6) + 4 + (4 + 2 + 9 + 4 + 2) * (3 * 6 * 9))
8 * 7 + (3 + 2 * 9 * 3 * 6 * 4) + (2 + 2 + 4 * 6 + 4 * 4) * 7 + 6
4 + (7 * (9 * 6 * 5 * 8) + 4 * 3) + 7
(9 + (4 * 3 * 4 * 9)) * (6 * 2 + 9 * 9 + 7 + 7)
8 + 5 * (4 * 4 * 2 * 9 * (5 + 8 + 6 * 3 + 3 * 9) * 3)
6 + 3 * 9 + (3 + (7 * 2 * 5 + 3) * (4 + 5 + 9 * 5 + 9) * 4 * 3 * 2)
((5 + 4 * 5 * 7) + 9 * 5 * 8 + 9) + (4 + 2 + 9)
8 + (4 * (6 + 8 * 4 * 4 * 4 * 5) + 4)
3 * 2 * (9 * 5 + 3 * 4 + 6) * 3 + 9
6 * 7 + 5 * (2 * (5 + 7)) + 9 + (7 + 4 * 2 + (5 + 4 * 2) * 2)
9 * 5 * ((4 * 8 + 9) + 2 + 7 + 4 * 5) * (5 + 5 * 3 * 4 * 8 + 9) * 7 + 2
8 + 8 * (5 + 6 + 8 + (6 * 9 * 9))
(9 * 3) * 9 + 3 * 9 * 3 * 2
2 + 4 * (5 + 3 + 6 * 4 * 7) + 7
2 * 6 + 2 * (6 + (7 + 3 + 6) + (6 + 4 * 7 + 3) + 9) + 9
8 + 8 + 4 + (2 * 2 + (8 * 3 * 2 + 2 * 9) * 9 * (4 + 4) * 6) * 4
7 + 9 + 4 * 2
2 * 7 + (8 + 7 * 2 + 3 * 8 * 3) * 9 * 4 * 9
8 * (7 + 3 + 9) + ((5 + 5 + 7 * 3 * 7 + 6) + 4 + 2) * 3 * 7 + 4
9 * ((6 + 8) + (5 * 4 + 9 + 3 * 5 + 5)) * (4 * 4)
4 + (6 + 3 * 2 * 2 + 8) + (9 * 7 * 5 + 3)
((8 * 2 * 7 * 2) + 7 + (4 + 6 + 5) + 5) * (3 + 9) + (7 + 6 + 5 * (9 * 3 * 8 + 9 + 5 * 6) * 9 * 8) + 3
(7 * (8 + 4 + 9 * 2 * 4 + 4) * 7 + 5 + 2 + (3 * 5 + 4)) * (2 * 4 * 3 * 4) * 8 + 9 * 3
2 + 6 * 8 + 9 + 3 + (4 * 4 * 2 * 9 * 7)
((4 + 5 + 4 * 7 + 4) * 8 * 6) + 6 * 3
((7 + 4) * 2 * 8 * 4 + 9 * 2) * 3 * 7 + 5 + 8
7 * (8 * 3 + 5 * (7 + 2 + 7 + 3 * 6 + 3) + 8)
9 + 3 * (5 * 6 * 4) * 3 * 3
4 + 5 * 4 + 5
2 * 3 + 8 * 5 + 5 * 4
6 + (6 * (2 + 3) * 5 + 5 * 5 + 6) * 7 * 9 * (4 + (5 * 8 + 7 + 3 + 8) * 6 + 5 + (3 + 3 * 8 * 4))
4 + 6 + 6 * 4 + ((6 + 3 + 9 + 4) + (4 * 4 * 7)) * 8
7 + 7 + 5 * (6 + 3 * 3 * (8 + 6 + 6) + 8 * 3) * 3
(3 + 3 + 2) * ((7 + 9 * 7) + 9 * 9 + (3 + 5 + 9) + 2 * 3) * 4 + 8 + 6
3 + 3 + (4 + 6 * 8 * 6) + 3 + 4 + 5
(4 * (3 + 3 + 8 + 6 * 5) + 9 + 3 + 9 + 7) + 8
9 * 9 * 2 * (8 + 5 + (4 * 7 * 9 * 3 * 5 + 6) * 2 + 5)
(9 + 4 + 4) + 2 + (2 + 3) * (7 * 9 + (8 + 4 + 5) + 7 * 7 + 7) * 5
(5 + (5 * 5 + 5 * 6 * 7) * 5 * 4 * 5) * 2 * 6 + 7
8 + 3 + (8 + (5 + 8 + 4)) + 8
8 * 7 * 2 * (5 * (4 + 2 + 3 + 7 * 8 + 7) + 6 + 4 * 3)
(8 + 7 + 5) + 6 * 9 + 8 + 9 + 6
(9 + 5 + (4 * 4) * (4 + 2) + (6 * 9) + 2) + 2 + 9 * 3 + 5
(3 * 2 + (6 * 3 * 8 * 4) * 8 * 4 + (6 * 6 + 4)) * 8
4 + (8 * 5 * 3 + 2)
9 * (2 + 7 * 8 * (9 * 2 * 9 * 9) + 6) * 7 + 2
7 + 5 + 4
2 + 5 + 7 * (5 + 7 * 4 + 3 + 7 + (5 * 9 * 6 + 8 * 5 * 2)) * 2 + 3
4 + (4 + 5 + (3 + 7 * 2 + 5 * 9)) + (5 + 5 * 4) * (7 * 9) * (3 * 8 + 5 * 7 * 2 * (6 * 7 + 2 + 5)) * 3
5 + 9 + ((7 * 2 + 3 * 4 + 6 + 2) * 8 * 8) * (2 * 5 + (9 * 7 * 4 * 9) * (8 + 4) * 8) + ((8 * 2 * 4) * 5 + 4 * 3 + 7)
6 * ((9 * 4 * 4 + 8) * 8 * 6 + 4 * 8) + 6
3 * 7 + (2 * 7 * 6 + 4 + 3 * 3) + 8 + (4 * 5) + 9
4 * 5 * 7 + 6
5 * (4 + 3 + (5 + 6 * 2) + 4 * 3) * 2
6 * (3 + 5 * (4 * 5 + 9)) + 6 + (9 * 3 * 7 * 6) * 7
(6 * 5 + 4 * 3 * 7 * (8 * 9)) * 4 + 4 + 8 * (3 + 7 * 5) + 2
9 * 4 * 5 + ((7 * 6 * 2 * 8 + 3 * 5) * 7 * 4 + 8 + 5) + 3 + 8
9 + 2 + ((5 * 4 + 2 + 4) + 6)
((6 + 7 * 8 * 2 + 8) + 3) + 4
((6 + 3 + 5 + 3) + 6 * 6 * 7 + 7) + ((3 + 3 * 9 * 3) * (2 + 9 * 3 * 2 * 6 + 3) + (9 + 6 + 4 + 6 + 9) + (9 + 5) + 8 + 4)
4 * (4 + (3 + 3 + 2 * 4 + 8) + (3 * 3 * 3 * 7 + 6 * 4) * 7 * 8 + 7) * (7 * 6 * 9 * 7) + (5 * 5) * 5 * 6
(6 * 3) + 9
7 * 2 + 3 + 3 + 7 + 9
4 * 5 + 4 + (5 * 6 * (5 + 3 + 4 * 3) * 2 + 6) + 5 * (8 * 4 + 8)
((4 * 2) * 7 + (7 * 9 + 6 * 9 * 7 * 8) + 8 + 7 * 8) + (9 + 8) * (8 + 8 * 5) + 5 * ((9 + 8 + 5) + 9) * 5
((3 * 5 * 4 * 2 * 9) + 9 + 3 * 2) + ((2 * 5) + (7 + 7 + 8 * 4 + 2 * 5) * 8) + (5 * 7 * 2 * 9) + 7 + (9 * 4 + 9) + (8 * (6 * 7 * 7 + 3) + 2)
3 * (9 + 5 * (8 * 9 * 6)) * 5 * 6
5 + (5 + (6 + 8 * 6 * 9 + 7 + 4) + 2 * 3 * (7 * 5 * 5 * 4 + 2)) * 3 + 5 * 6 * 8
4 + 3 + 4 + (2 * 9 + 3 + 9 + 7) + 9
((9 * 7 + 6 + 7 + 5) + 5 + 6 + 6 * 9 + (3 * 5)) + 9 + 2 + 3
3 * 4 + 4 * (9 + 3 + (8 * 7) + 7) + (7 * 9 + 2) + 9
9 * 6 + ((5 + 8 + 9 * 5 + 7) * (6 * 8 * 8 + 6) + 5) * 6
9 + 7 * (4 + 2 * (7 * 9 + 3 + 4 * 7 * 5) * 3 * 8) * 6 * 2 * 6
9 * 6
(9 + 6 * 6) + ((6 * 4 + 8 + 3 * 2) + (3 + 8 + 6 * 9 + 3 + 9) + 8) * 4
(7 + 7 * 3 + 2 * 9) * (3 + 7 * 7) * 9
(5 * (2 * 2) * 9) + 5 + (5 * (4 * 4 + 3 + 8) * (6 + 6 + 2 + 4 * 7)) * 8 * 6 * 9
(5 * 4 + 6 * 6 * 7) * (3 * 4 * (9 * 5))
(3 + 2 * 2 * 2 + 3 + 5) + 6 * (2 + 6 + 5 * (2 + 4 + 7 * 7) * 8) * 3
4 * 3 + (8 * 9 * (7 + 7 + 6 + 6) * 9)
2 * 8 + (6 * 9) * 6 + 9
((2 + 6 + 8 * 9 * 7 * 2) + (7 * 5 + 2 + 7) * 5 * 2) + 7 * 6 * 9
8 * 4 + 4 * 2 + (5 * 8) + 7
(5 + 6) + 9 + ((4 * 5 * 9) * 7 * 5 * 8 * 5) * 8 * 2 * (5 + 9 * 5 + 6)
5 + 4 + 3 * (3 * (6 * 8 * 9 * 2 * 4 * 9) + 6 * (6 * 8 + 4 + 6))
(9 * 4 * 7 + 8 * (8 + 9 + 6 * 7) * 6) + 7 + 3 * 8
2 * 8 + (6 * 4 * 6 * 5 * 6 * (3 * 4 + 7))
(6 * (2 + 2) + 5) * (6 + 9 * 4 * 8 + 3 + 7) * 5 * 3 + 7
2 + (4 * 8 * 7 + (8 * 8 * 4) * 2 * (2 + 6 + 7 * 9 * 4 + 2))
)";

auto const res1 = parse_solve(input, solve_no_precedence);
fmt::print("res to part 1 is {}\n", res1);

auto const res2 = parse_solve(input, solve_add_first);
fmt::print("res to part 2 is {}\n", res2);

}